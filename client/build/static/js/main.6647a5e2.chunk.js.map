{"version":3,"sources":["components/eqworks-white.png","reducers/index.js","constants/action-types.js","store/index.js","serviceWorker.js","actions/index.js","components/Button.js","components/Slider.js","components/Dropdown.js","components/SearchBar.js","components/Table.js","helpers/timeFormatter.js","components/NavBar.js","components/Error.js","components/App.js","index.js"],"names":["module","exports","initialState","dataList","filteredData","searchTerm","sortBy","minValues","events","impressions","clicks","revenue","showEvents","showStats","showHourly","error","bool","rootReducer","state","action","type","payload","options","shouldSort","keys","fuse","Fuse","results","search","sort","a","b","filter","row","parseInt","value","message","filteredDataByMin","storeEnhancers","compose","store","createStore","applyMiddleware","thunk","Boolean","window","location","hostname","match","getDataList","endpoint","dispatch","axios","get","then","res","data","catch","err","response","setShowHourly","Button","props","onClick","label","Slider","min","useSelector","useDispatch","className","max","onChange","event","target","handleChange","step","Dropdown","name","disabled","SearchBar","id","placeholder","setSearchTerm","Table","useEffect","dataRows","map","index","key","date","slice","hour","ampm","num","timeFormatter","toLocaleString","parseFloat","style","currency","minimumFractionDigits","NavBar","src","logo","alt","Error","App","defaults","baseURL","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6647a5e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eqworks-white.a38a88ef.png\";","import { SHOW_EVENTS, SHOW_STATS, GET_DATA_LIST, FILTER_DATA_LIST, SET_SORT_BY, SHOW_HOURLY, SET_MIN_VALUE, SET_ERROR, SET_SEARCH_TERM, RESET } from \"../constants/action-types\";\nimport Fuse from 'fuse.js';\n\nconst initialState = {\n  dataList: [],\n  filteredData: [],\n  searchTerm: '',\n  sortBy: 'default',\n  minValues: {\n    events: 0,\n    impressions: 0,\n    clicks: 0,\n    revenue: 0\n  },\n  showEvents: false,\n  showStats: true,\n  showHourly: true,\n  error: { bool: false }\n};\n\nfunction rootReducer(state = initialState, action) {\n  \n  if (action.type === GET_DATA_LIST) {\n    return {...state, error: {...state.error, bool: false}, dataList: [...action.payload], filteredData: [...action.payload]};\n  }\n\n  if (action.type === FILTER_DATA_LIST) {\n\n    // Config fuzzy search options\n    const options = {\n      shouldSort: true,\n      keys: ['location']\n    };\n\n    // Create new Fuse object for fuzzy searh\n    const fuse = new Fuse(state.dataList, options);\n\n    // Filter by location name\n    const results = (state.searchTerm === '' ? state.dataList : fuse.search(state.searchTerm))\n      // Sort by selected stat\n      .sort((a, b) => b[state.sortBy] - a[state.sortBy])\n      // Filter by minimum values\n      .filter(row => {\n        let events = true;\n        let impressions = true;\n        let clicks = true;\n        let revenue = true;\n\n        if (row.events && parseInt(row.events) <= state.minValues.events) {\n          events = false;\n        }\n        if (row.impressions && parseInt(row.impressions) <= state.minValues.impressions) {\n          impressions = false;\n        }\n        if (row.clicks && parseInt(row.clicks) <= state.minValues.clicks) {\n          clicks = false;\n        }\n        if (row.revenue && parseInt(row.revenue) <= state.minValues.revenue) {\n          revenue = false;\n        }      \n        return (events && impressions && clicks && revenue);\n      });\n      \n    return {...state, filteredData: [...results]};\n  }\n\n  if (action.type === SHOW_EVENTS) {\n    return {...state, showEvents: true, showStats: false};\n  }\n\n  if (action.type === SHOW_STATS) {\n    return {...state, showEvents: false, showStats: true};\n  }\n\n  if (action.type === SHOW_HOURLY) {\n    return {...state, showHourly: action.payload };\n  }\n\n  if (action.type === SET_SORT_BY) {\n    return {...state, sortBy: action.payload};\n  }\n\n  if (action.type === SET_MIN_VALUE) {\n    return {...state, minValues: {...state.minValues, [action.payload.type]: action.payload.value}};\n  }\n\n  if (action.type === SET_ERROR) {\n    return {...state, error: {...state.error, bool: true, message: action.payload}}\n  }\n\n  if (action.type === SET_SEARCH_TERM) {\n    return {...state, searchTerm: action.payload}\n  }\n\n  if (action.type === RESET) {\n    return {\n      ...state, \n      filteredData: [...state.dataList], \n      filteredDataByMin: [...state.dataList],\n      searchTerm: '',\n      minValues: {\n        events: 0,\n        impressions: 0,\n        clicks: 0,\n        revenue: 0\n      },\n      sortBy: 'default'\n    };\n  }\n\n  return state;\n};\n\nexport default rootReducer;","export const SHOW_EVENTS = 'SHOW_EVENTS';\nexport const SHOW_STATS = 'SHOW_STATS';\nexport const GET_DATA_LIST = 'GET_DATA_LIST';\nexport const FILTER_DATA_LIST = 'FILTER_DATA_LIST';\nexport const SHOW_HOURLY = 'SHOW_HOURLY';\nexport const SET_SORT_BY = 'SET_SORT_BY';\nexport const SET_MIN_VALUE = 'SET_MIN_VALUE';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_SEARCH_TERM = 'SET_SEARCH_TERM';\nexport const RESET = 'RESET';","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"../reducers/index\";\nimport thunk from 'redux-thunk';\n\nconst storeEnhancers = compose;\n\nconst store = createStore(\n  rootReducer,\n  storeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SHOW_EVENTS, SHOW_STATS, GET_DATA_LIST, FILTER_DATA_LIST, SHOW_HOURLY, SET_SORT_BY, SET_MIN_VALUE, SET_ERROR, SET_SEARCH_TERM, RESET } from \"../constants/action-types\";\nimport axios from 'axios';\n\nexport function getDataList(endpoint) {\n  return function(dispatch) {\n    return axios.get(endpoint)\n      .then(res => {\n        dispatch({ type: GET_DATA_LIST, payload: res.data });\n      })\n      .catch(err => {\n        dispatch({ type: SET_ERROR, payload: err.response.data });\n      })\n  }\n}\n\nexport function filterDataList() {\n  return { type: FILTER_DATA_LIST }\n}\n\nexport function setShowEvents() {\n  return { type: SHOW_EVENTS };\n}\n\nexport function setShowStats() {\n  return { type: SHOW_STATS };\n}\n\nexport function setShowHourly(bool) {\n  return { type: SHOW_HOURLY, payload: bool };\n}\n\nexport function setSortBy(value) {\n  return { type: SET_SORT_BY, payload: value };\n}\n\nexport function setMinValue(type, value) {\n  return { type: SET_MIN_VALUE, payload: { type, value } };\n}\n\nexport function setSearchTerm(value) {\n  return { type: SET_SEARCH_TERM, payload: value };\n}\n\nexport function reset() {\n  return { type: RESET };\n}","import React from 'react';\n\nimport './Button.css';\n\nexport default function Button(props) {\n  return (\n    <button onClick={props.onClick}>\n      {props.label}\n    </button>\n  );\n}","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setMinValue, filterDataList } from '../actions/index';\n\nimport './Slider.css';\n\nexport default function Slider(props) {\n\n  const min = useSelector(state => state.minValues[props.type]);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(setMinValue(props.type, event.target.value));\n    dispatch(filterDataList());\n  };\n\n  return (\n    <div className='range-slider'>\n      <h6>{props.type}</h6>\n      <h6>Min: {min}</h6>\n      <input \n        className='min-slider'\n        type='range'\n        min={props.min}\n        max={props.max}\n        value={min}\n        onChange={event => handleChange(event)}\n        step={props.step}\n      />\n    </div>\n  );\n}","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setSortBy, filterDataList } from '../actions/index';\n\nimport './Dropdown.css';\n\nexport default function Dropdown(props) {\n\n  const showEvents = useSelector(state => state.showEvents);\n  const showStats = useSelector(state => state.showStats);\n  const sortBy = useSelector(state => state.sortBy);\n\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(setSortBy(event.target.value));\n    dispatch(filterDataList());\n  }\n\n  return (\n    <div className='dropdown'>\n      <h6>{props.label}</h6>\n      <select name='Sort By' value={sortBy} onChange={event => handleChange(event)} >\n        <option disabled value='default'></option>\n        {showStats && \n          <>\n            <option value='impressions'>Impressions</option>\n            <option value='clicks'>Clicks</option>\n            <option value='revenue'>Revenue</option>\n          </>\n        }\n        {showEvents && <option value='events'>Events</option>}\n      </select>\n    </div>\n  );\n}","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterDataList, setSearchTerm, reset } from '../actions/index';\n\nimport Button from './Button';\nimport Slider from './Slider';\nimport Dropdown from './Dropdown';\n\nimport './SearchBar.css';\n\nexport default function SearchBar() {\n  \n  const showEvents = useSelector(state => state.showEvents);\n  const showStats = useSelector(state => state.showStats);\n  const searchTerm = useSelector(state => state.searchTerm);\n\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const value = event.target.value;\n    dispatch(setSearchTerm(value));\n    dispatch(filterDataList());\n  };\n\n  const handleReset = () => {\n    dispatch(reset());\n  };\n\n  return (\n    <div id='search-container'>\n      <input \n        id='search-bar'\n        placeholder='Search by location' \n        value={searchTerm}\n        onChange={event => handleChange(event)}\n      />\n      <Button id='reset-button' label='Reset' onClick={handleReset} />\n      {showStats && \n        <>\n          <Slider type='impressions' min={0} max={300000} step={10000} />\n          <Slider type='clicks' min={0} max={500} step={10} />\n          <Slider type='revenue' min={0} max={1000} step={100} />\n        </>\n      }\n      {showEvents && <Slider type='events' min={0} max={100} step={10} />}\n      <Dropdown label='Sort By' />\n    </div>\n  );\n}","import React, { useEffect } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getDataList } from '../actions/index';\nimport { timeFormatter } from '../helpers/timeFormatter';\n\nimport './Table.css';\n\nexport default function Table() {\n\n  const filteredData = useSelector(state => state.filteredData);\n  const showEvents = useSelector(state => state.showEvents);\n  const showStats = useSelector(state => state.showStats);\n  const showHourly = useSelector(state => state.showHourly);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getDataList('/stats/hourly'));\n  }, [dispatch]);\n  \n  const dataRows = filteredData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.date.slice(0, 10)}</td>\n        {showHourly && <td>{timeFormatter(row.hour)}</td>}\n        <td>{row.location}</td>\n        {showStats && \n          <>\n            <td>{parseInt(row.impressions).toLocaleString('en-US')}</td>\n            <td>{parseInt(row.clicks).toLocaleString('en-US')}</td>\n            <td>{parseFloat(row.revenue).toLocaleString('en-US', {style: 'currency', currency: 'CAD', minimumFractionDigits: 2})}</td>\n          </>\n        }\n        {showEvents && <td>{row.events}</td>}\n      </tr>\n    )\n  });\n\n  return (\n    <table id='data-table'>\n      <thead>\n        <tr>\n          <th>Date</th>\n          {showHourly && <th>Time</th>}\n          <th>Location</th>\n          {showStats && \n            <>\n              <th>Impressions</th>\n              <th>Clicks</th>\n              <th>Revenue</th>\n            </>\n          }\n          {showEvents && <th>Events</th>}\n        </tr>\n      </thead>\n      <tbody>\n        {dataRows}\n      </tbody>\n    </table>\n  );\n}","export function timeFormatter(hour) {\n\n  let ampm;\n  let num = hour;\n\n  if (num === 0) {\n    num = 12;\n    ampm = 'AM';\n  } else if (num >= 1 && num <= 11) {\n    ampm = 'AM';\n  } else if (num === 12) {\n    ampm = 'PM';\n  } else {\n    num = num - 12;\n    ampm = 'PM';\n  }\n\n  return `${num}:00 ${ampm}`;\n}","import React from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { setShowEvents, setShowStats, getDataList, setShowHourly, reset } from '../actions/index';\n\nimport Button from './Button';\nimport logo from './eqworks-white.png';\n\nimport './NavBar.css';\n\nexport default function NavBar(props) {\n\n  const dispatch = useDispatch();\n\n  const handleDailyEvents = () => {\n    dispatch(getDataList('/events/daily'));\n    dispatch(setShowEvents());\n    dispatch(setShowHourly(false));\n    dispatch(reset());\n  };\n\n  const handleHourlyEvents = () => {\n    dispatch(getDataList('/events/hourly'));\n    dispatch(setShowEvents());\n    dispatch(setShowHourly(true));\n    dispatch(reset());\n  };\n\n  const handleDailyStats = () => {\n    dispatch(getDataList('/stats/daily'));\n    dispatch(setShowStats());\n    dispatch(setShowHourly(false));\n    dispatch(reset());\n  };\n\n  const handleHourlyStats = () => {\n    dispatch(getDataList('/stats/hourly'));\n    dispatch(setShowStats());\n    dispatch(setShowHourly(true));\n    dispatch(reset());\n  };\n\n  return (\n    <header>\n      <img src={logo} alt='EQ Works logo' />\n      <div id='nav-bar'>\n        <Button label='Daily Events' onClick={handleDailyEvents} />\n        <Button label='Hourly Events' onClick={handleHourlyEvents} />\n        <Button label='Daily Stats' onClick={handleDailyStats} />\n        <Button label='Hourly Stats' onClick={handleHourlyStats} />\n      </div>\n    </header>\n  );\n}","import React from 'react';\n\nimport './Error.css';\n\nexport default function Error(props) {\n\n  return (\n    <h3 className='error-message'>{props.message}</h3>\n  );\n}","import React from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport SearchBar from './SearchBar';\nimport Table from './Table';\nimport NavBar from './NavBar';\nimport Error from './Error';\n\nimport './App.css';\n\nfunction App() {\n\n  const error = useSelector(state => state.error);\n\n  return (\n    <>\n      <NavBar />\n      <div id=\"app-container\">\n        <SearchBar />\n        {error.bool ? <Error message={error.message} /> : <Table />}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\";\n\nimport axios from 'axios';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\n\nimport './index.css';\n\n// Axios global defaults config\naxios.defaults.baseURL = process.env.REACT_APP_API_BASE_URL;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}